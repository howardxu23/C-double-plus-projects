const int shuffle[256] = int[256]
(206,21,27,124,238,156,174,113,170,81,237,12,22,241,23,141,10,167,146,114,
 162,9,13,5,139,216,91,65,6,189,221,86,7,187,212,166,67,149,131,98,126,1,
 137,54,8,70,110,148,46,151,106,89,121,236,101,227,49,72,255,239,3,73,244,169,
 157,96,175,75,77,205,160,30,36,178,112,88,154,228,104,68,185,43,184,182,14,163,
 233,18,180,45,83,186,59,25,129,111,74,215,122,218,144,44,100,161,53,254,55,92,
 35,145,220,119,195,66,130,150,140,181,57,56,84,207,245,231,191,248,61,52,118,168,
 226,223,40,197,116,58,232,243,214,204,33,28,105,202,24,152,133,51,196,210,115,
 190,97,147,143,132,50,94,165,109,198,39,134,120,2,85,128,135,20,79,123,90,222,
 26,155,82,252,136,76,217,32,240,63,38,159,247,37,176,78,234,42,219,209,0,103,
 64,99,15,95,242,47,11,246,211,199,17,62,29,192,69,183,200,34,225,138,224,127,
 235,229,117,253,71,108,87,201,208,171,203,41,173,102,125,213,107,179,250,80,16,
 4,153,142,251,31,172,164,188,249,93,60,230,194,177,193,48,158,19);    

const vec3 gradients[16] = vec3[16](
vec3(1,1,0),vec3(-1,1,0),vec3(1,-1,0),vec3(-1,-1,0),
vec3(1,0,1),vec3(-1,0,1),vec3(1,0,-1),vec3(-1,0,-1),
vec3(0,1,1),vec3(0,-1,1),vec3(0,1,-1),vec3(0,-1,-1),
vec3(1,1,0),vec3(-1,1,0),vec3(0,-1,1),vec3(0,-1,-1));

int Hash( in int i, in int j, in int k )
{
    return shuffle[(shuffle[(shuffle[i%256] + j)%256] + k)%256]%16;
}

vec3 Gradient( int i, int j, int k )
{
	return gradients[Hash(i,j,k)];
}

vec3 PositionVector( int i, int j, int k, vec3 pos )
{
	return (pos-vec3(i,j,k));
}

float Smoothstep( float f0, float f1, float x )
{
	x = max(x, 0.0);
	x = min(x, 1.0);
	x = 3.0*x*x - 2.0*x*x*x;
	return f0*(1.0f-x) + f1*x;
}


float PerlinNoise( vec3 pos, float iScale )
{
	float noiseVals[8];
	pos = (pos + vec3(100,100,100))*iScale; // offset of 100 is to make sure it is in the positive quadrant
	// get the indices of the cube this vert is in
	int i = int( pos.x );
	int j = int( pos.y );
	int k = int( pos.z );
	// get the noise values at the vertices of the cube
	noiseVals[0] = dot( Gradient(i,j,k),       PositionVector(i,j,k,pos) );
	noiseVals[1] = dot( Gradient(i+1,j,k),     PositionVector(i+1,j,k,pos) );
	noiseVals[2] = dot( Gradient(i+1,j,k+1),   PositionVector(i+1,j,k+1,pos) );
	noiseVals[3] = dot( Gradient(i,j,k+1),     PositionVector(i,j,k+1,pos) );
	noiseVals[4] = dot( Gradient(i,j+1,k),     PositionVector(i,j+1,k,pos) );
	noiseVals[5] = dot( Gradient(i+1,j+1,k),   PositionVector(i+1,j+1,k,pos) );
	noiseVals[6] = dot( Gradient(i+1,j+1,k+1), PositionVector(i+1,j+1,k+1,pos) );
	noiseVals[7] = dot( Gradient(i,j+1,k+1),   PositionVector(i,j+1,k+1,pos) );
	// now do the interpolation

	// interpolation parameters tx, ty, tz
	vec3 t = pos - vec3(i,j,k);

	float ft, fb;
	float fy0, fy1;
	// bottom xz plane
	ft = Smoothstep( noiseVals[3], noiseVals[2], t.x);
	fb = Smoothstep( noiseVals[0], noiseVals[1], t.x);
	fy0 = Smoothstep( fb, ft, t.z); 
	// top xz plane
	ft = Smoothstep( noiseVals[7], noiseVals[6], t.x);
	fb = Smoothstep( noiseVals[4], noiseVals[5], t.x);
	fy1 = Smoothstep( fb, ft, t.z); 
	// y interpolation
	return Smoothstep(fy0, fy1, t.y);
}

float ScaledNoise( vec3 pos, float iScale )
{
	return (1.0f + PerlinNoise( pos, iScale))*0.5f;
}

float FractalNoise( vec3 pos, float iScale, float mult, int numOctaves)
{
    float fac = 1.0f;
    float noise = ScaledNoise(pos, iScale);
    for ( int i = 0; i < numOctaves-1; i++ )
    {
    	fac *= mult;
        iScale *= 2.0;
        noise += fac*ScaledNoise(pos, iScale);
    }
    return noise;
}

bool SphereIntersect( in vec3 pos, in vec3 dir, in vec3 centre, in float radius,
in mat3 rotMat, out vec3 hitPos, out vec3 hitNorm, out vec3 hitPosLocal )
{
    // coefficients of the quadratic equation, a=1
    float b = dot(pos-centre,dir)*2.0;
    float c = dot(pos-centre,pos-centre)-radius*radius;
    if ( b*b < 4.0*c )
        return false;
    float sol1, sol2, sq;
    sq = sqrt(b*b-4.0*c);
    sol1 = 0.5*(-b - sq);
    sol2 = 0.5*(-b + sq);
    if ( sol2 < sol1 )
        sol1 = sol2;
    hitPos = pos + dir * sol1;
    hitNorm = normalize(hitPos-centre);
    hitPosLocal = transpose(rotMat)*(hitPos-centre);
    return true;
}
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    uv-= vec2(0.5,0.5);
    uv.x *= iResolution.x/iResolution.y;
    vec3 r=vec3(0.0,0.0,-0.5);//cam pos;
    vec3 n =normalize(vec3(uv,0)-r);

    mat3 rotMat=mat3(1,0,0,0,1,0,0,0,1);
    
    vec3 spherePos=vec3(0,0,4);
    float noise=0.5+2.5*FractalNoise(vec3(uv,iTime*0.5),1.0,0.6,3);
    float rad=noise;
    vec3 hitPos,hitNorm,hitPosLocal;
    bool hit;
    hit =SphereIntersect(r,n,spherePos,rad,rotMat,hitPos,hitNorm,hitPosLocal);
    // Output to screen
   if ( hit )
    {
        vec3 refr = refract(n,hitNorm,0.7);
        vec3 refl = reflect(n,hitNorm);
        fragColor = texture(iChannel0,refr) + 0.2*texture(iChannel1,refl);
    }
    else
        fragColor = texture(iChannel0,n);
}